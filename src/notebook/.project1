########################################################
#======================================================#
#——————————————————————————————————————————————————————#
#                                                      #
# NOTE: LOOKING FURTHER IS A VIOLATION OF THE HONOR CODE
#                                                      #
#——————————————————————————————————————————————————————#
#======================================================#
########################################################

global SEED = sum(Int.(collect("AA228V Project 1"))) # Cheeky seed value :)


function save_trajectory(sys::System, τ; count=stepcount(), filename=get_filename(sys), reran=true)
    if reran
        cτ = base64encode("τ" * string(hash(get_filename(sys)), base=16))
        cτ = replace(cτ, "="=>"")
        ccount = base64encode("count" * string(hash(get_filename(sys)), base=16))
        ccount = replace(ccount, "="=>"")
        eτ = 𝐛𝐲𝐞(τ, 3, cτ)
        ecount = 𝐛𝐲𝐞(count, 3, ccount)
        results = Dict(:τ => eτ, :count => ecount)
        BSON.@save filename results
    end
    savelog = """
    _**Results saved for $(env_name(sys)):**_\n `$(abspath(filename))`

    📩 **Please submit the file listed above to Gradescope.**"""
    return savelog
end


function run_mlf(sys, ψ; f, seed=SEED)
    Random.seed!(seed)
    n = max_steps(sys)
    τ = f(sys, ψ; n=n)
    count = stepcount()
    return τ, count
end


function check_is_failure(sys::System, ψ, τ; include_plot=true)
    if isfailure(ψ, τ)
        return true
    else
        title = "$(env_name(sys)) tests failed."
        plt = ""
        try
            if include_plot
                plt = plot(sys, ψ, τ; title="Non-failure found", size=(620,350))
            end
        catch end
        return almost(Markdown.MD(Markdown.parse("""
    **The trajectory for `$(system_name(sys))` was not a failure.**

    **Tip**: Filter failures over a vector of rollouts `τs` like so:
    ```julia
    τs_failures = filter(τ->isfailure(ψ, τ), τs)
    ```"""), md"$plt"))
    end
end


function check_max_steps(sys::System, ψ, τ, count::Int;
                         reran=false, save=true, latextras="", include_plot=true)
    d = get_depth(sys)
    p = NominalTrajectoryDistribution(sys, d)
    ℓ = logpdf(p, τ)
    n_max = max_steps(sys)
    reran_comment = reran ? "" : "**Note: Results loaded from file. 📁**"

    plt = ""
    try
        if include_plot
            plt = plot(sys, ψ, τ; title="Most-likely failure found", size=(620,350))
        end
    catch end

    if count > n_max
        return false, almost(Markdown.MD(Markdown.parse("""
    **Total steps of \$$(count)\$ exceeded allotted maximum of \$$n_max\$.** _Still showing plot for debugging purposes._"""),
    md"$plt", md"""_Results not saved to file._"""))
    else
        if save
            savelog = save_trajectory(sys, τ; reran=reran)
            passing_comment = "You found a passing trajectory!"
            title = "$(env_name(sys)) tests passed!"
        else
            savelog = "**Results _not_ saved—this is just a local test.**"
            passing_comment = "You found a failure trajectory!"
            title = "$(env_name(sys)) test!"
        end
        extra = isempty(latextras) ? "" : "\$\$$latextras\$\$"
        text = Markdown.MD(Markdown.parse("""
        $(reran_comment)
        
        $(passing_comment)
        \$\$\\begin{gather}
            \\ell = $(round(ℓ; digits=3)) \\tag{failure log-likelihood} \\\\
            n_\\text{steps} = $(format(count; latex=true)) \\tag{\\texttt{step} calls \$\\le $(format(n_max; latex=true))\$}
        \\end{gather}\$\$
        
        $extra
        """), md"$plt", Markdown.parse(savelog))
        return true, correct(text; title)
    end
end


function test_mlf(sys::System, ψ;
                  f::Function,
                  τ=missing, count=Inf, seed=SEED,
                  nofile=false, save=true, latextras="", include_plot=true)
    if ismissing(τ)
        τ_mlf, count = run_mlf(sys, ψ; f, seed)
        reran = true
    else
        τ_mlf = τ
        reran = false
    end
    if nofile && save
        return nothing, info(Markdown.parse("""
        Please fill in the following function:
        ```julia
        most_likely_failure(sys::$(system_name(sys)), ψ)
        ```
        **If you've already written this function, click the checkbox above to run the test.**""")), false
    elseif τ_mlf isa Vector && !(τ_mlf isa Vector{<:Vector})
        failure_check = check_is_failure(sys, ψ, τ_mlf; include_plot)
        if failure_check == true # could be Markdown
            max_steps_check, max_steps_log = check_max_steps(sys, ψ, τ_mlf, count; reran, save, latextras, include_plot)
            return τ_mlf, max_steps_log, max_steps_check
        else
            return τ_mlf, failure_check, false
        end
    else
        return τ_mlf, almost(Markdown.parse("""
        Make sure the following returns a single trajectory, i.e., a `Vector` type, not `Vector{Vector}`:
        ```julia
        most_likely_failure(sys::$(system_name(sys)), ψ)
        ```
        **Currently returning**: `$(typeof(τ_mlf))`""")), false
    end
end


function rerun(sys::System, ψ; f, run=false, save=true, latextras="", include_plot=true)
    if run && save
        τ, log, passed = test_mlf(sys, ψ; f, include_plot)
    else
        filename = get_filename(sys)
        if isfile(filename) && save
            local τ, count
            try
                results = BSON.load(filename)[:results]
                cτ = base64encode("τ" * string(hash(filename), base=16))
                cτ = replace(cτ, "="=>"")
                ccount = base64encode("count" * string(hash(filename), base=16))
                ccount = replace(ccount, "="=>"")
                eτ = results[:τ]
                τ = eval(Meta.parse(𝐡𝐢(eτ, 3, cτ)))
                ecount = results[:count]
                count = eval(Meta.parse(𝐡𝐢(ecount, 3, ccount)))
            catch err
                if err isa ArgumentError
                    error("Malformed file. Please do not edit the results file directly: $filename")
                else
                    rethrow(err)
                end
            end
            τ, log, passed = test_mlf(sys, ψ; f, τ, count, latextras, include_plot)
        else
            τ, log, passed = test_mlf(sys, ψ; f, nofile=true, save, latextras, include_plot)
        end				
    end
    return τ, log, passed
end


function 𝐛𝐲𝐞(x, n, c)
    y = string(x)
    for i in 1:n
        y = base64encode(y)
    end
    return string(c, y)
end


function remove(str::String, c::String)
    start_index = findfirst(c, str)
    if start_index === nothing
        return str
    else
        end_index = start_index.start + length(c) - 1
        return str[1:start_index.start-1] * str[end_index+1:end]
    end
end


function 𝐡𝐢(y, n, c)
    x = string(y)
    x = remove(x, c)
    for i in 1:n
        x = base64decode(x)
    end
    return String(x)
end


cs = let 𝐜 = [-2, 2, -3.52992, 2.2025, -3.14159] # small test thresholds
    𝐛𝐲𝐞("$𝐜", 1, replace(base64encode("AA228V Secret"), "="=>""))
end


struct PredicateWrapper <: StanfordAA228V.Formula
    μ::Function
    c_encoded
    predicate_type
end


function (ϕenc::PredicateWrapper)(x)
    μ = ϕenc.μ
    c = ϕenc.c_encoded(String(base64decode("QUEyMjhWL0NTMjM4ViBQcmVkaWNhdGVXcmFwcGVyIFNlY3JldCE=")))
    ϕ = ϕenc.predicate_type(μ, c)
    return ϕ(x)
end


function StanfordAA228V.ρ(x, ϕenc::PredicateWrapper)
    μ = ϕenc.μ
    c = ϕenc.c_encoded(String(base64decode("QUEyMjhWL0NTMjM4ViBQcmVkaWNhdGVXcmFwcGVyIFNlY3JldCE=")))
    ϕ = ϕenc.predicate_type(μ, c)
    return StanfordAA228V.ρ(ϕ)
end


function StanfordAA228V.ρ̃(x, ϕenc::PredicateWrapper; kwargs...)
    μ = ϕenc.μ
    c = ϕenc.c_encoded(String(base64decode("QUEyMjhWL0NTMjM4ViBQcmVkaWNhdGVXcmFwcGVyIFNlY3JldCE=")))
    ϕ = ϕenc.predicate_type(μ, c)
    return StanfordAA228V.ρ̃(ϕ; kwargs...)
end


function get_c(password="")
    __password__ = String(base64decode("QUEyMjhWL0NTMjM4ViBQcmVkaWNhdGVXcmFwcGVyIFNlY3JldCE="))
    #############################################################
    #=                                                         =#
    #= NOTE: CONTINUING HERE IS A VIOLATION OF THE HONOR CODE. =#
    #=                                                         =#
    #############################################################
    if password != __password__
        error("""
        Please do not access the ψ threshold value. In the real world for more complex problems, you would not have direct access to failure region. Even though the simple Gaussian problem is just that, simple, you should not look at this.
        ╔════════════════════════════════════════════════════════════╗
        ║ Continuing further will be a violation of the Honor Code. ║
        ╚════════════════════════════════════════════════════════════╝""")
    else
        return true
    end
end


function create_specification(c=missing; hidden=false)
    I = missing
    c = ismissing(c) ? randn() : c
    flip = c > 0
    predicate_type = flip ? FlippedPredicate : Predicate
    if hidden
        ϕ = let _c = c
            function c_encoded(password="")
                #############################################################
                #############################################################
                #= NOTE: CONTINUING HERE IS A VIOLATION OF THE HONOR CODE. =#
                if get_c(password)
                    return _c
                end
            end
            Always(PredicateWrapper(s->s, c_encoded, predicate_type), I)
        end
    else
        ϕ = Always(predicate_type(s->s, c), I)
    end
    return LTLSpecification(ϕ)
end


function ψ2latex(::SmallSystem, ψ; sigdigits=3)
    if ψ.formula.ϕ isa PredicateWrapper
        #= NOTE: CONTINUING HERE IS A VIOLATION OF THE HONOR CODE. =#
        c = round(ψ.formula.ϕ.c_encoded(String(base64decode("QUEyMjhWL0NTMjM4ViBQcmVkaWNhdGVXcmFwcGVyIFNlY3JldCE="))); sigdigits)
        ~ = ψ.formula.ϕ.predicate_type == Predicate ? ">" : "<"
    else
        c = round(ψ.formula.ϕ.c; sigdigits)
        ~ = ψ.formula.ϕ isa Predicate ? ">" : "<"
    end
    return "\\psi(\\tau) = \\square(s $(~) $c)"
end


function run_mlf_multiple(sys::SmallSystem; f, cs=cs, run=true)
    ismissing(cs) && error("Please provide failure thresholds")
    cs = eval(Meta.parse(𝐡𝐢(cs, 1, replace(base64encode("AA228V Secret"), "="=>""))))
    filename = get_filename(sys)
    if run
        τs = []
        passes = []
        counts = []
        for c in cs
            ψ = create_specification(c; hidden=true) # Generalize for all System types
            τ, log, pass = rerun(sys, ψ; f, run, save=false, include_plot=false)
            push!(counts, stepcount())
            push!(τs, τ)
            push!(passes, pass)
        end
    else
        passes = trues(length(cs)) # saved file indicates all passed
        local τs, counts
        try
            results = BSON.load(filename)[:results]
            cτ = base64encode("τ" * string(hash(get_filename(sys)), base=16))
            cτ = replace(cτ, "="=>"")
            ccount = base64encode("count" * string(hash(get_filename(sys)), base=16))
            ccount = replace(ccount, "="=>"")
            eτs = results[:τ]
            τs = eval(Meta.parse(𝐡𝐢(eτs, 3, cτ)))
            ecounts = results[:count]
            counts = eval(Meta.parse(𝐡𝐢(ecounts, 3, ccount)))
        catch err
            if err isa ArgumentError
                error("Malformed file. Please do not edit the results file directly: $filename")
            else
                rethrow(err)
            end
        end
    end
    return τs, passes, counts
end


function rerun_multiple(sys::SmallSystem; f, run=true)
    filename = get_filename(sys)
    reeval = run || !isfile(filename)
    file_missing = !isfile(filename)
    if file_missing && !run
        τs = [nothing]
    else
        τs, passes, counts = run_mlf_multiple(sys; f, run)
    end
    sysname = system_name(sys)
    n_max = max_steps(sys)
    reran_comment = run ? "" : "**Note: Results loaded from file. 📁**"

    if all(isnothing.(τs)) && file_missing && !run
        return τs, info(Markdown.parse("""
    Please fill in the following function:
    ```julia
    most_likely_failure(sys::$sysname, ψ)
    ```
    **If you've already written this function, click the checkbox above to run the test.**""")), false
    elseif all(passes)
        text = Markdown.MD(Markdown.parse(reran_comment), Markdown.parse(save_trajectory(sys, τs; count=counts)))
        return τs, correct(text; title="All $sysname tests passed!"), true
    elseif any(count->count > n_max, counts)
        return τs, almost(Markdown.parse("""
    **Total steps of \$$(Int.(counts))\$ exceeded allotted maximum of \$$n_max\$.** _Not revealing plots._

    _Results not saved to file._""")), false
    elseif any(τ->!(τ isa Vector) || τ isa Vector{<:Vector}, τs)
        return τs, almost(Markdown.parse("""
        Make sure the following returns a single trajectory, i.e., a `Vector` type, not `Vector{Vector}`:
        ```julia
        most_likely_failure(sys::$sysname, ψ)
        ```
        **Currently returning (for the first test)**: `$(typeof(τs[1]))`""")), false
    else
        return τs, almost(Markdown.parse("""
    **Some (or all) of the trajectories for `$sysname` were not failures.**

    **Tip**: Filter failures over a vector of rollouts `τs` like so:
    ```julia
    τs_failures = filter(τ->isfailure(ψ, τ), τs)
    ```""")), false
    end
end


function validate_traj(τ1, τ2)
    all([
        all(τd.s == τ.s for (τd, τ) in zip(τ1, τ2)),
        all(τd.o == τ.o for (τd, τ) in zip(τ1, τ2)),
        all(τd.a == τ.a for (τd, τ) in zip(τ1, τ2)),
        all(τd.x.xa == τ.x.xa for (τd, τ) in zip(τ1, τ2)),
        all(τd.x.xs == τ.x.xs for (τd, τ) in zip(τ1, τ2)),
        all(τd.x.xo == τ.x.xo for (τd, τ) in zip(τ1, τ2)),
    ])
end

# For seeding control
function Random.seed!(seed=nothing)
    check_stacktrace_for_invalids(InvalidSeeders.invalids())
    Random.seed!(Random.default_rng(), seed)
    copy!(Random.get_tls_seed(), Random.default_rng())
    Random.default_rng()
end
